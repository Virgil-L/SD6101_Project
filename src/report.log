2023-11-13 00:12:23,618 - numexpr.utils - INFO - Note: NumExpr detected 16 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-11-13 00:12:23,620 - numexpr.utils - INFO - NumExpr defaulting to 8 threads.
2023-11-13 13:31:31,163 - numexpr.utils - INFO - Note: NumExpr detected 16 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-11-13 13:31:31,165 - numexpr.utils - INFO - NumExpr defaulting to 8 threads.
2023-11-13 14:48:43,952 - numexpr.utils - INFO - Note: NumExpr detected 16 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-11-13 14:48:43,954 - numexpr.utils - INFO - NumExpr defaulting to 8 threads.
2023-11-13 15:07:55,742 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.6}
2023-11-13 15:08:29,615 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.6}
2023-11-13 15:10:23,327 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -712.730564266673, best pos: [  0.38767638   0.62751078   0.99152049   0.70311067   0.99974936
   0.65578107   3.19115062  16.80320036  62.19360301  28.06719828
 106.76253435  23.66735804]
2023-11-13 15:23:24,110 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.6}
2023-11-13 15:24:32,440 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.6}
2023-11-13 15:26:30,354 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -697.5152054317144, best pos: [  0.61738252   0.78255831   0.81694697   0.71043227   0.99998476
   0.51617805   2.49537765  16.05309976  63.14112061  28.02761784
 110.44396424  25.57399752]
2023-11-13 15:26:30,401 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.6}
2023-11-13 15:28:44,973 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.6}
2023-11-13 15:32:32,195 - numexpr.utils - INFO - Note: NumExpr detected 16 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-11-13 15:32:32,197 - numexpr.utils - INFO - NumExpr defaulting to 8 threads.
2023-11-13 15:32:32,586 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.6}
2023-11-13 15:32:51,258 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -722.8748335696179, best pos: [  0.43326545   0.98189239   0.97946222   0.60394763   0.99410492
   0.61812154   2.94790575  14.48836497  62.13044575  30.53700307
 106.87619508  23.06558648]
2023-11-13 15:40:42,994 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.5, 'c2': 0.5, 'w': 0.6}
2023-11-13 15:41:05,237 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -703.5916273830289, best pos: [ 0.55857283  0.77545715  0.98659571  0.31209471  0.99992233  0.96051997
  3.32276906 15.48862457 69.0396293  31.78094543 97.92000202 21.30897877]
2023-11-13 15:42:43,415 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.3, 'c2': 0.6, 'w': 0.3}
2023-11-13 15:43:02,074 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -627.3676969819744, best pos: [  0.34226041   0.85541048   0.8737052    0.58253708   0.99725755
   0.56113555   3.25192891  15.59284857  65.00984023  30.83584541
 109.9822302   42.62468412]
2023-11-13 15:50:36,166 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 1.6, 'c2': 1.8, 'w': 0.8}
2023-11-13 15:51:10,893 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -546.931443175248, best pos: [  0.6191111    0.85248909   0.75581592   0.58763931   0.94442176
   0.45370994   1.37864101  14.9284491   79.80632821   8.6690441
 118.73853015  27.55106354]
2023-11-13 15:51:10,968 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 1.6, 'c2': 1.8, 'w': 0.8}
2023-11-13 15:51:27,453 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.8}
2023-11-13 15:52:06,781 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -691.2936047549109, best pos: [  0.48925767   0.76379311   0.90698531   0.83025059   0.98233967
   0.49787662   2.71596266  18.07035067  60.19454453  27.09169878
 112.4006855   24.67357813]
2023-11-13 15:52:06,859 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.8}
2023-11-13 15:52:56,653 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -624.0906079217923, best pos: [  0.4193226    0.74953734   0.90715647   0.87327537   0.97381354
   0.12006244   3.4437329   13.20912636  52.98165512  27.8765098
 115.6844023   24.9339479 ]
2023-11-13 15:52:56,739 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.8}
2023-11-13 15:53:46,885 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -582.3478691277203, best pos: [ 0.3417672   0.54739933  0.92702714  0.62882341  0.98780827  0.86164258
  3.80488366  7.35160169 67.24558046 23.69340043 95.35424799 17.97189226]
2023-11-13 15:53:46,966 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.8}
2023-11-13 15:54:36,469 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -675.0169887978481, best pos: [  0.59054478   0.78542098   0.95268493   0.64474414   0.99631229
   0.78864799   5.09655775   8.38922674  64.5595955   31.02326204
 110.63183085  20.23622643]
2023-11-13 15:54:36,553 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.8}
2023-11-13 15:55:52,172 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1157.4209228337004, best pos: [  0.73310655   0.9640982    0.94198716   0.72716948   0.9976575
   0.73031672  16.56373247  21.91217734  92.22308705  77.33965099
 146.12841527  29.96617341]
2023-11-13 15:55:52,286 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.8}
2023-11-13 15:56:30,620 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1162.2793702613963, best pos: [  0.77069054   0.65457344   0.97608649   0.31685528   0.99792411
   0.73317575  18.97765517  27.49677882  95.86768952  78.72292154
 141.5700483   33.74305966]
2023-11-13 15:56:30,708 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.8}
2023-11-13 15:57:14,072 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -957.0348378646241, best pos: [  0.59176834   0.89428998   0.95789793   0.61303828   0.99873608
   0.77612074   8.95733932  19.85414046  81.08404723  57.93322256
 130.28210716  27.11658697]
2023-11-13 16:02:11,930 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:02:58,612 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -712.3832820410704, best pos: [ 0.71807256  0.68294896  0.99927021  0.61738041  0.99933346  0.91813361
  2.66460512 15.59339449 63.13347121 26.53106416 99.76060355 22.01996229]
2023-11-13 16:02:58,702 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:03:39,580 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -635.8377778856421, best pos: [  0.58951555   0.71437349   0.99232328   0.55077418   0.99739134
   0.33151771   3.62563462  12.35048057  58.84892727  29.60873934
 105.18024721  23.40041015]
2023-11-13 16:03:39,664 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:04:40,131 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -599.0949191235776, best pos: [ 0.57454215  0.56828309  0.98772672  0.85978586  0.99876219  0.53041758
  2.68979496  7.84209446 58.62560832 23.50411726 99.98440086 21.12491443]
2023-11-13 16:04:40,228 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:05:30,667 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -689.6495887247382, best pos: [  0.24673674   0.8767918    0.92785865   0.75090087   0.9999939
   0.53180729   6.3161165    8.92232553  61.77088219  32.39360901
 117.96034301  20.667145  ]
2023-11-13 16:05:30,757 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:06:07,736 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1150.131328894752, best pos: [  0.95703104   0.70938616   0.99997115   0.46396474   0.99953457
   0.90424236  16.9053385   24.72083188 105.28371126  83.85263756
 134.47722356  30.37388393]
2023-11-13 16:06:07,825 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:06:33,772 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1176.3514399245757, best pos: [  0.58962739   0.89318472   0.95131626   0.50616167   0.99990929
   0.65472522  18.73729218  23.65413195  92.48577802  80.68146923
 147.79819126  32.69508402]
2023-11-13 16:06:33,848 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:07:06,261 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -970.0555135326634, best pos: [  0.61701094   0.94444579   0.9409237    0.66850422   0.99887433
   0.81948303   8.80621361  18.88597974  80.53163828  56.26017361
 129.75527063  27.95044579]
2023-11-13 16:20:01,273 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:20:35,839 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -689.4300964030497, best pos: [  0.66921191   0.70853125   0.92555514   0.40056526   0.99999039
   0.38566273   2.62118709  18.05256803  63.35921881  34.55640199
 108.99696589  27.17550629]
2023-11-13 16:20:35,860 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:21:23,838 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -546.3470376262673, best pos: [ 0.32230948  0.26119561  0.99976481  0.65411123  0.99942586  0.83120792
  5.31755768 14.04208292 63.85455587 25.46266415 97.88391852 37.04152924]
2023-11-13 16:21:23,862 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:22:07,031 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -579.332138355475, best pos: [  0.63455021   0.54896303   0.94516683   0.73886489   0.99948215
   0.36872801   2.56795253   8.40993058  60.77957873  25.89893197
 102.76369239  23.05083662]
2023-11-13 16:22:07,052 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:23:27,100 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -695.4422310565169, best pos: [  0.76765917   0.4552141    0.99829084   0.90806495   0.99935146
   0.70967258   4.46170637  10.47213034  58.87681534  26.84861015
 110.90745426  22.56220533]
2023-11-13 16:23:27,131 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:23:58,491 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1147.145099949737, best pos: [  0.71801111   0.64635124   0.99507952   0.40198499   0.99927606
   0.86344123  20.1983416   25.97406873  99.84253167  89.5466213
 136.16114867  30.4195176 ]
2023-11-13 16:23:58,512 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
2023-11-13 16:24:35,093 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -1145.1510569311588, best pos: [  0.3801333    0.69314389   0.96568505   0.6250062    0.99882761
   0.64857387  21.79811208  25.68752628  92.22525222  76.8571177
 151.5823756   33.63992426]
2023-11-13 16:24:35,111 - pyswarms.single.global_best - INFO - Optimize for 1000 iters with {'c1': 0.7, 'c2': 0.5, 'w': 0.9}
